#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace QlBida
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="QLBIDA")]
	public partial class BidaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertBidaTable(BidaTable instance);
    partial void UpdateBidaTable(BidaTable instance);
    partial void DeleteBidaTable(BidaTable instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertOrdDetail(OrdDetail instance);
    partial void UpdateOrdDetail(OrdDetail instance);
    partial void DeleteOrdDetail(OrdDetail instance);
    partial void InsertOrderTable(OrderTable instance);
    partial void UpdateOrderTable(OrderTable instance);
    partial void DeleteOrderTable(OrderTable instance);
    partial void InsertServiceCategory(ServiceCategory instance);
    partial void UpdateServiceCategory(ServiceCategory instance);
    partial void DeleteServiceCategory(ServiceCategory instance);
    partial void InsertTableService(TableService instance);
    partial void UpdateTableService(TableService instance);
    partial void DeleteTableService(TableService instance);
    partial void InsertTableCategory(TableCategory instance);
    partial void UpdateTableCategory(TableCategory instance);
    partial void DeleteTableCategory(TableCategory instance);
    #endregion
		
		public BidaDataContext() : 
				base(global::QlBida.Properties.Settings.Default.QLBIDAConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BidaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BidaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BidaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BidaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<BidaTable> BidaTables
		{
			get
			{
				return this.GetTable<BidaTable>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<OrdDetail> OrdDetails
		{
			get
			{
				return this.GetTable<OrdDetail>();
			}
		}
		
		public System.Data.Linq.Table<OrderTable> OrderTables
		{
			get
			{
				return this.GetTable<OrderTable>();
			}
		}
		
		public System.Data.Linq.Table<ServiceCategory> ServiceCategories
		{
			get
			{
				return this.GetTable<ServiceCategory>();
			}
		}
		
		public System.Data.Linq.Table<TableService> TableServices
		{
			get
			{
				return this.GetTable<TableService>();
			}
		}
		
		public System.Data.Linq.Table<TableCategory> TableCategories
		{
			get
			{
				return this.GetTable<TableCategory>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private string _Phone;
		
		private string _UserName;
		
		private string _Password;
		
		private System.Nullable<int> _AccLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAccLevelChanging(System.Nullable<int> value);
    partial void OnAccLevelChanged();
    #endregion
		
		public Account()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="VarChar(100)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="VarChar(10)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="VarChar(30)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(30)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccLevel", DbType="Int")]
		public System.Nullable<int> AccLevel
		{
			get
			{
				return this._AccLevel;
			}
			set
			{
				if ((this._AccLevel != value))
				{
					this.OnAccLevelChanging(value);
					this.SendPropertyChanging();
					this._AccLevel = value;
					this.SendPropertyChanged("AccLevel");
					this.OnAccLevelChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BidaTable")]
	public partial class BidaTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableId;
		
		private string _TableName;
		
		private System.Nullable<int> _TableCatID;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<int> _PlayTime;
		
		private System.Nullable<int> _TableStatus;
		
		private EntitySet<OrderTable> _OrderTables;
		
		private EntityRef<TableCategory> _TableCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableIdChanging(int value);
    partial void OnTableIdChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnTableCatIDChanging(System.Nullable<int> value);
    partial void OnTableCatIDChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnPlayTimeChanging(System.Nullable<int> value);
    partial void OnPlayTimeChanged();
    partial void OnTableStatusChanging(System.Nullable<int> value);
    partial void OnTableStatusChanged();
    #endregion
		
		public BidaTable()
		{
			this._OrderTables = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTables), new Action<OrderTable>(this.detach_OrderTables));
			this._TableCategory = default(EntityRef<TableCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableName", DbType="NVarChar(50)")]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableCatID", DbType="Int")]
		public System.Nullable<int> TableCatID
		{
			get
			{
				return this._TableCatID;
			}
			set
			{
				if ((this._TableCatID != value))
				{
					if (this._TableCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableCatIDChanging(value);
					this.SendPropertyChanging();
					this._TableCatID = value;
					this.SendPropertyChanged("TableCatID");
					this.OnTableCatIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayTime", DbType="Int")]
		public System.Nullable<int> PlayTime
		{
			get
			{
				return this._PlayTime;
			}
			set
			{
				if ((this._PlayTime != value))
				{
					this.OnPlayTimeChanging(value);
					this.SendPropertyChanging();
					this._PlayTime = value;
					this.SendPropertyChanged("PlayTime");
					this.OnPlayTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableStatus", DbType="Int")]
		public System.Nullable<int> TableStatus
		{
			get
			{
				return this._TableStatus;
			}
			set
			{
				if ((this._TableStatus != value))
				{
					this.OnTableStatusChanging(value);
					this.SendPropertyChanging();
					this._TableStatus = value;
					this.SendPropertyChanged("TableStatus");
					this.OnTableStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BidaTable_OrderTable", Storage="_OrderTables", ThisKey="TableId", OtherKey="TableId")]
		public EntitySet<OrderTable> OrderTables
		{
			get
			{
				return this._OrderTables;
			}
			set
			{
				this._OrderTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableCategory_BidaTable", Storage="_TableCategory", ThisKey="TableCatID", OtherKey="TableCatId", IsForeignKey=true)]
		public TableCategory TableCategory
		{
			get
			{
				return this._TableCategory.Entity;
			}
			set
			{
				TableCategory previousValue = this._TableCategory.Entity;
				if (((previousValue != value) 
							|| (this._TableCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableCategory.Entity = null;
						previousValue.BidaTables.Remove(this);
					}
					this._TableCategory.Entity = value;
					if ((value != null))
					{
						value.BidaTables.Add(this);
						this._TableCatID = value.TableCatId;
					}
					else
					{
						this._TableCatID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TableCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.BidaTable = this;
		}
		
		private void detach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.BidaTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customer")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CusId;
		
		private string _CusName;
		
		private string _CusAddress;
		
		private string _CusPhone;
		
		private System.Nullable<int> _CusLevel;
		
		private EntitySet<OrderTable> _OrderTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCusIdChanging(int value);
    partial void OnCusIdChanged();
    partial void OnCusNameChanging(string value);
    partial void OnCusNameChanged();
    partial void OnCusAddressChanging(string value);
    partial void OnCusAddressChanged();
    partial void OnCusPhoneChanging(string value);
    partial void OnCusPhoneChanged();
    partial void OnCusLevelChanging(System.Nullable<int> value);
    partial void OnCusLevelChanged();
    #endregion
		
		public Customer()
		{
			this._OrderTables = new EntitySet<OrderTable>(new Action<OrderTable>(this.attach_OrderTables), new Action<OrderTable>(this.detach_OrderTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CusId
		{
			get
			{
				return this._CusId;
			}
			set
			{
				if ((this._CusId != value))
				{
					this.OnCusIdChanging(value);
					this.SendPropertyChanging();
					this._CusId = value;
					this.SendPropertyChanged("CusId");
					this.OnCusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CusName", DbType="NVarChar(100)")]
		public string CusName
		{
			get
			{
				return this._CusName;
			}
			set
			{
				if ((this._CusName != value))
				{
					this.OnCusNameChanging(value);
					this.SendPropertyChanging();
					this._CusName = value;
					this.SendPropertyChanged("CusName");
					this.OnCusNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CusAddress", DbType="NVarChar(200)")]
		public string CusAddress
		{
			get
			{
				return this._CusAddress;
			}
			set
			{
				if ((this._CusAddress != value))
				{
					this.OnCusAddressChanging(value);
					this.SendPropertyChanging();
					this._CusAddress = value;
					this.SendPropertyChanged("CusAddress");
					this.OnCusAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CusPhone", DbType="VarChar(10)")]
		public string CusPhone
		{
			get
			{
				return this._CusPhone;
			}
			set
			{
				if ((this._CusPhone != value))
				{
					this.OnCusPhoneChanging(value);
					this.SendPropertyChanging();
					this._CusPhone = value;
					this.SendPropertyChanged("CusPhone");
					this.OnCusPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CusLevel", DbType="Int")]
		public System.Nullable<int> CusLevel
		{
			get
			{
				return this._CusLevel;
			}
			set
			{
				if ((this._CusLevel != value))
				{
					this.OnCusLevelChanging(value);
					this.SendPropertyChanging();
					this._CusLevel = value;
					this.SendPropertyChanged("CusLevel");
					this.OnCusLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OrderTable", Storage="_OrderTables", ThisKey="CusId", OtherKey="CusId")]
		public EntitySet<OrderTable> OrderTables
		{
			get
			{
				return this._OrderTables;
			}
			set
			{
				this._OrderTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_OrderTables(OrderTable entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrdDetail")]
	public partial class OrdDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private int _SvId;
		
		private System.Nullable<int> _Quantity;
		
		private System.Nullable<double> _Price;
		
		private EntityRef<OrderTable> _OrderTable;
		
		private EntityRef<TableService> _TableService;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnSvIdChanging(int value);
    partial void OnSvIdChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    #endregion
		
		public OrdDetail()
		{
			this._OrderTable = default(EntityRef<OrderTable>);
			this._TableService = default(EntityRef<TableService>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					if (this._OrderTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SvId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SvId
		{
			get
			{
				return this._SvId;
			}
			set
			{
				if ((this._SvId != value))
				{
					if (this._TableService.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSvIdChanging(value);
					this.SendPropertyChanging();
					this._SvId = value;
					this.SendPropertyChanged("SvId");
					this.OnSvIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTable_OrdDetail", Storage="_OrderTable", ThisKey="OrderId", OtherKey="OrderId", IsForeignKey=true)]
		public OrderTable OrderTable
		{
			get
			{
				return this._OrderTable.Entity;
			}
			set
			{
				OrderTable previousValue = this._OrderTable.Entity;
				if (((previousValue != value) 
							|| (this._OrderTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderTable.Entity = null;
						previousValue.OrdDetails.Remove(this);
					}
					this._OrderTable.Entity = value;
					if ((value != null))
					{
						value.OrdDetails.Add(this);
						this._OrderId = value.OrderId;
					}
					else
					{
						this._OrderId = default(int);
					}
					this.SendPropertyChanged("OrderTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableService_OrdDetail", Storage="_TableService", ThisKey="SvId", OtherKey="SvId", IsForeignKey=true)]
		public TableService TableService
		{
			get
			{
				return this._TableService.Entity;
			}
			set
			{
				TableService previousValue = this._TableService.Entity;
				if (((previousValue != value) 
							|| (this._TableService.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TableService.Entity = null;
						previousValue.OrdDetails.Remove(this);
					}
					this._TableService.Entity = value;
					if ((value != null))
					{
						value.OrdDetails.Add(this);
						this._SvId = value.SvId;
					}
					else
					{
						this._SvId = default(int);
					}
					this.SendPropertyChanged("TableService");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTable")]
	public partial class OrderTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private System.Nullable<int> _CusId;
		
		private System.Nullable<int> _TableId;
		
		private System.Nullable<double> _Surcharge;
		
		private System.Nullable<System.DateTime> _StartTime;
		
		private System.Nullable<System.DateTime> _EndTime;
		
		private System.Nullable<int> _PlayTime;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _OrdStatus;
		
		private EntitySet<OrdDetail> _OrdDetails;
		
		private EntityRef<Customer> _Customer;
		
		private EntityRef<BidaTable> _BidaTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnCusIdChanging(System.Nullable<int> value);
    partial void OnCusIdChanged();
    partial void OnTableIdChanging(System.Nullable<int> value);
    partial void OnTableIdChanged();
    partial void OnSurchargeChanging(System.Nullable<double> value);
    partial void OnSurchargeChanged();
    partial void OnStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnStartTimeChanged();
    partial void OnEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEndTimeChanged();
    partial void OnPlayTimeChanging(System.Nullable<int> value);
    partial void OnPlayTimeChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnOrdStatusChanging(System.Nullable<int> value);
    partial void OnOrdStatusChanged();
    #endregion
		
		public OrderTable()
		{
			this._OrdDetails = new EntitySet<OrdDetail>(new Action<OrdDetail>(this.attach_OrdDetails), new Action<OrdDetail>(this.detach_OrdDetails));
			this._Customer = default(EntityRef<Customer>);
			this._BidaTable = default(EntityRef<BidaTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CusId", DbType="Int")]
		public System.Nullable<int> CusId
		{
			get
			{
				return this._CusId;
			}
			set
			{
				if ((this._CusId != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCusIdChanging(value);
					this.SendPropertyChanging();
					this._CusId = value;
					this.SendPropertyChanged("CusId");
					this.OnCusIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableId", DbType="Int")]
		public System.Nullable<int> TableId
		{
			get
			{
				return this._TableId;
			}
			set
			{
				if ((this._TableId != value))
				{
					if (this._BidaTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTableIdChanging(value);
					this.SendPropertyChanging();
					this._TableId = value;
					this.SendPropertyChanged("TableId");
					this.OnTableIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Surcharge", DbType="Float")]
		public System.Nullable<double> Surcharge
		{
			get
			{
				return this._Surcharge;
			}
			set
			{
				if ((this._Surcharge != value))
				{
					this.OnSurchargeChanging(value);
					this.SendPropertyChanging();
					this._Surcharge = value;
					this.SendPropertyChanged("Surcharge");
					this.OnSurchargeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartTime
		{
			get
			{
				return this._StartTime;
			}
			set
			{
				if ((this._StartTime != value))
				{
					this.OnStartTimeChanging(value);
					this.SendPropertyChanging();
					this._StartTime = value;
					this.SendPropertyChanged("StartTime");
					this.OnStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> EndTime
		{
			get
			{
				return this._EndTime;
			}
			set
			{
				if ((this._EndTime != value))
				{
					this.OnEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EndTime = value;
					this.SendPropertyChanged("EndTime");
					this.OnEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlayTime", DbType="Int")]
		public System.Nullable<int> PlayTime
		{
			get
			{
				return this._PlayTime;
			}
			set
			{
				if ((this._PlayTime != value))
				{
					this.OnPlayTimeChanging(value);
					this.SendPropertyChanging();
					this._PlayTime = value;
					this.SendPropertyChanged("PlayTime");
					this.OnPlayTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrdStatus", DbType="Int")]
		public System.Nullable<int> OrdStatus
		{
			get
			{
				return this._OrdStatus;
			}
			set
			{
				if ((this._OrdStatus != value))
				{
					this.OnOrdStatusChanging(value);
					this.SendPropertyChanging();
					this._OrdStatus = value;
					this.SendPropertyChanged("OrdStatus");
					this.OnOrdStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTable_OrdDetail", Storage="_OrdDetails", ThisKey="OrderId", OtherKey="OrderId")]
		public EntitySet<OrdDetail> OrdDetails
		{
			get
			{
				return this._OrdDetails;
			}
			set
			{
				this._OrdDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_OrderTable", Storage="_Customer", ThisKey="CusId", OtherKey="CusId", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.OrderTables.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.OrderTables.Add(this);
						this._CusId = value.CusId;
					}
					else
					{
						this._CusId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BidaTable_OrderTable", Storage="_BidaTable", ThisKey="TableId", OtherKey="TableId", IsForeignKey=true)]
		public BidaTable BidaTable
		{
			get
			{
				return this._BidaTable.Entity;
			}
			set
			{
				BidaTable previousValue = this._BidaTable.Entity;
				if (((previousValue != value) 
							|| (this._BidaTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BidaTable.Entity = null;
						previousValue.OrderTables.Remove(this);
					}
					this._BidaTable.Entity = value;
					if ((value != null))
					{
						value.OrderTables.Add(this);
						this._TableId = value.TableId;
					}
					else
					{
						this._TableId = default(Nullable<int>);
					}
					this.SendPropertyChanged("BidaTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrdDetails(OrdDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderTable = this;
		}
		
		private void detach_OrdDetails(OrdDetail entity)
		{
			this.SendPropertyChanging();
			entity.OrderTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ServiceCategory")]
	public partial class ServiceCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SvCatId;
		
		private string _SvCatName;
		
		private EntitySet<TableService> _TableServices;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSvCatIdChanging(int value);
    partial void OnSvCatIdChanged();
    partial void OnSvCatNameChanging(string value);
    partial void OnSvCatNameChanged();
    #endregion
		
		public ServiceCategory()
		{
			this._TableServices = new EntitySet<TableService>(new Action<TableService>(this.attach_TableServices), new Action<TableService>(this.detach_TableServices));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SvCatId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SvCatId
		{
			get
			{
				return this._SvCatId;
			}
			set
			{
				if ((this._SvCatId != value))
				{
					this.OnSvCatIdChanging(value);
					this.SendPropertyChanging();
					this._SvCatId = value;
					this.SendPropertyChanged("SvCatId");
					this.OnSvCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SvCatName", DbType="NVarChar(30)")]
		public string SvCatName
		{
			get
			{
				return this._SvCatName;
			}
			set
			{
				if ((this._SvCatName != value))
				{
					this.OnSvCatNameChanging(value);
					this.SendPropertyChanging();
					this._SvCatName = value;
					this.SendPropertyChanged("SvCatName");
					this.OnSvCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_TableService", Storage="_TableServices", ThisKey="SvCatId", OtherKey="SvCatId")]
		public EntitySet<TableService> TableServices
		{
			get
			{
				return this._TableServices;
			}
			set
			{
				this._TableServices.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TableServices(TableService entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = this;
		}
		
		private void detach_TableServices(TableService entity)
		{
			this.SendPropertyChanging();
			entity.ServiceCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableService")]
	public partial class TableService : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SvId;
		
		private string _SvName;
		
		private System.Nullable<int> _SvCatId;
		
		private System.Nullable<double> _Price;
		
		private System.Nullable<int> _Quantity;
		
		private EntitySet<OrdDetail> _OrdDetails;
		
		private EntityRef<ServiceCategory> _ServiceCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSvIdChanging(int value);
    partial void OnSvIdChanged();
    partial void OnSvNameChanging(string value);
    partial void OnSvNameChanged();
    partial void OnSvCatIdChanging(System.Nullable<int> value);
    partial void OnSvCatIdChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnQuantityChanging(System.Nullable<int> value);
    partial void OnQuantityChanged();
    #endregion
		
		public TableService()
		{
			this._OrdDetails = new EntitySet<OrdDetail>(new Action<OrdDetail>(this.attach_OrdDetails), new Action<OrdDetail>(this.detach_OrdDetails));
			this._ServiceCategory = default(EntityRef<ServiceCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SvId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SvId
		{
			get
			{
				return this._SvId;
			}
			set
			{
				if ((this._SvId != value))
				{
					this.OnSvIdChanging(value);
					this.SendPropertyChanging();
					this._SvId = value;
					this.SendPropertyChanged("SvId");
					this.OnSvIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SvName", DbType="NVarChar(50)")]
		public string SvName
		{
			get
			{
				return this._SvName;
			}
			set
			{
				if ((this._SvName != value))
				{
					this.OnSvNameChanging(value);
					this.SendPropertyChanging();
					this._SvName = value;
					this.SendPropertyChanged("SvName");
					this.OnSvNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SvCatId", DbType="Int")]
		public System.Nullable<int> SvCatId
		{
			get
			{
				return this._SvCatId;
			}
			set
			{
				if ((this._SvCatId != value))
				{
					if (this._ServiceCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSvCatIdChanging(value);
					this.SendPropertyChanging();
					this._SvCatId = value;
					this.SendPropertyChanged("SvCatId");
					this.OnSvCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int")]
		public System.Nullable<int> Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableService_OrdDetail", Storage="_OrdDetails", ThisKey="SvId", OtherKey="SvId")]
		public EntitySet<OrdDetail> OrdDetails
		{
			get
			{
				return this._OrdDetails;
			}
			set
			{
				this._OrdDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ServiceCategory_TableService", Storage="_ServiceCategory", ThisKey="SvCatId", OtherKey="SvCatId", IsForeignKey=true)]
		public ServiceCategory ServiceCategory
		{
			get
			{
				return this._ServiceCategory.Entity;
			}
			set
			{
				ServiceCategory previousValue = this._ServiceCategory.Entity;
				if (((previousValue != value) 
							|| (this._ServiceCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ServiceCategory.Entity = null;
						previousValue.TableServices.Remove(this);
					}
					this._ServiceCategory.Entity = value;
					if ((value != null))
					{
						value.TableServices.Add(this);
						this._SvCatId = value.SvCatId;
					}
					else
					{
						this._SvCatId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ServiceCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrdDetails(OrdDetail entity)
		{
			this.SendPropertyChanging();
			entity.TableService = this;
		}
		
		private void detach_OrdDetails(OrdDetail entity)
		{
			this.SendPropertyChanging();
			entity.TableService = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TableCategory")]
	public partial class TableCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TableCatId;
		
		private string _TableCatName;
		
		private EntitySet<BidaTable> _BidaTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTableCatIdChanging(int value);
    partial void OnTableCatIdChanged();
    partial void OnTableCatNameChanging(string value);
    partial void OnTableCatNameChanged();
    #endregion
		
		public TableCategory()
		{
			this._BidaTables = new EntitySet<BidaTable>(new Action<BidaTable>(this.attach_BidaTables), new Action<BidaTable>(this.detach_BidaTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableCatId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TableCatId
		{
			get
			{
				return this._TableCatId;
			}
			set
			{
				if ((this._TableCatId != value))
				{
					this.OnTableCatIdChanging(value);
					this.SendPropertyChanging();
					this._TableCatId = value;
					this.SendPropertyChanged("TableCatId");
					this.OnTableCatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TableCatName", DbType="NVarChar(50)")]
		public string TableCatName
		{
			get
			{
				return this._TableCatName;
			}
			set
			{
				if ((this._TableCatName != value))
				{
					this.OnTableCatNameChanging(value);
					this.SendPropertyChanging();
					this._TableCatName = value;
					this.SendPropertyChanged("TableCatName");
					this.OnTableCatNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TableCategory_BidaTable", Storage="_BidaTables", ThisKey="TableCatId", OtherKey="TableCatID")]
		public EntitySet<BidaTable> BidaTables
		{
			get
			{
				return this._BidaTables;
			}
			set
			{
				this._BidaTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BidaTables(BidaTable entity)
		{
			this.SendPropertyChanging();
			entity.TableCategory = this;
		}
		
		private void detach_BidaTables(BidaTable entity)
		{
			this.SendPropertyChanging();
			entity.TableCategory = null;
		}
	}
}
#pragma warning restore 1591
